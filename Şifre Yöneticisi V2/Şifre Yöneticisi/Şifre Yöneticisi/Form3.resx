<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A//+AAP//wAP//+AH/8=
</value>
  </data>
</root>